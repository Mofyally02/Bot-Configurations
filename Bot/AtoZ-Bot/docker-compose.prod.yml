version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: atoz-database-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-atoz_bot_db}
      POSTGRES_USER: ${POSTGRES_USER:-atoz_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    ports:
      - "5432:5432"
    networks:
      - atoz-network-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-atoz_user} -d ${POSTGRES_DB:-atoz_bot_db}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: atoz-redis-prod
    ports:
      - "6379:6379"
    volumes:
      - redis_data_prod:/data
    networks:
      - atoz-network-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: atoz-backend-prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-atoz_user}:${POSTGRES_PASSWORD}@database:5432/${POSTGRES_DB:-atoz_bot_db}
      - REDIS_URL=redis://redis:6379
      - PYTHONPATH=/app
      - ENVIRONMENT=production
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./bot:/app/bot  # Mount existing bot code
      - ./logs:/app/logs  # Mount logs directory
    ports:
      - "8000:8000"
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - atoz-network-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --workers 4

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: atoz-frontend-prod
    environment:
      - NODE_ENV=production
      - VITE_API_URL=${VITE_API_URL:-https://api.atozbot.com}
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - atoz-network-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: atoz-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - atoz-network-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Bot Service (Optional - for automated bot running)
  bot:
    build:
      context: ./bot
      dockerfile: Dockerfile
    container_name: atoz-bot-prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-atoz_user}:${POSTGRES_PASSWORD}@database:5432/${POSTGRES_DB:-atoz_bot_db}
      - REDIS_URL=redis://redis:6379
      - ATOZ_BASE_URL=${ATOZ_BASE_URL}
      - ATOZ_USERNAME=${ATOZ_USERNAME}
      - ATOZ_PASSWORD=${ATOZ_PASSWORD}
      - REFRESH_INTERVAL_SEC=${REFRESH_INTERVAL_SEC:-0.5}
      - HEADLESS=true
      - MAX_ACCEPT_PER_RUN=${MAX_ACCEPT_PER_RUN:-5}
    volumes:
      - ./bot:/app
      - ./logs/bot:/app/logs
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - atoz-network-prod
    restart: unless-stopped
    profiles:
      - bot  # Only start with --profile bot

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local

networks:
  atoz-network-prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

